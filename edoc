#!/usr/bin/env lua

-- East Documentation generator
-- Included with East itself (same license too)

function err(desc, thing, msg)
	if (thing ~= nil) then
		return thing
	else
		io.stderr:write("Failed to "..desc..": "..msg.."\n")
		os.exit(1)
	end
end

function ReadAndParse(filename)
	local f = err("open file for reading",io.open(filename))
	local doc = {}
	for line in f:lines() do
		local name, effects, desc = line:match("^..? %((.)%) (.-%(.-%)) (.*)$")

		if (name) then
			doc[#doc+1] = {name=name, effects=effects,desc=desc}
		end
	end
	f:close()
	return doc
end

function OutputParsed(parsed_docs, out_filename)
	local f = err("open file for writing",io.open(out_filename,"w"))

	f:write([[# Documentation

## Reference on function indentification syntax

Every character before the `(` denotes what is modified, which can be any of the following:

- `d`: Modifies the data
- `i`: Modifies the input string (Read only)
- `c`: Modifies the control flow (AKA the interpreter state)
- `e`: Modifies the executed string (Read only)

If you see a syntax like `c1->c2`, then it means that it reads from c1 and writes to c2, for example, e->d means that it reads from the executed string and writes to the data

If you see a syntax like `c1,c2`, then it means that everything until the `,` on the `(...)` part is taken from c1, and the rest is taken from c2

Both syntaxes can be combined, for example, `c1,c2->c3,c4,c5`

Everything inside the parentheses is the stuff pushed, readed and popped from the previous things

Everything before `--` is what is popped/readed

If there is a `->` instead of a `--`, then it means that it takes the entire data, like on `!`

The parameters are separated by a space

If a parameter has a `:` before its name, then it is just readed from the data without popping

This is an example for a user defined instruction (denoted by the `$`) called `$s`
```east
# ($s) d( x -- x2 ) Square the given x
```

A bigger example showing everything explained here:

```east
# ($e) d,i,e->c,d( top :readed, input, c1 -- skip, pushed_item ) A complex function that explains everything here
```

And now, for the actual documentation:

]])
	for _,inst in ipairs(parsed_docs) do
		f:write("## Instruction `"..inst.name.."`\n".."**"..inst.effects.."**\n\n"..inst.desc.."\n\n")
	end

	f:write("Generated by EDoc")

	f:close()
end

OutputParsed(ReadAndParse(arg[1] or "main.east"), "DOCUMENTATION.md")
